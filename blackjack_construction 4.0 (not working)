# This is a random module.  it allows you to pick/choose randomly. 
import random
# this is the list of number types you can receive from an unlimited deck.  Meaning the probability of randomly choosing a number below are equal for player and computer. 
cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
#computer cards are empty to be filled with hand, User_card holds user's hands.  Computer and user total counts the cards inside of computer and user list. 
computer_card = []
user_card = []
computer_total = 0 
user_total = 0

#allows for dealing computer when called
def computer_deal():
  global computer_card
  computer_card.append(cards[random.randint(0,len(cards))])

#allows for dealing user when called
def user_deal():
  global user_card
  user_card.append(cards[random.randint(0,len(cards))])

def initial_card(user, computer): # this whole function provides initial cards
  for initial in range(1, 3): # this line calls a range of 2 for two cards
    global user_card # refenrecing user cards outside the function
    global computer_card #refencing computer cards list outside this function
    user.append(cards[random.randint(0,len(cards))]) #it appends a randomly chosen card from the cards list to place inside user_card
    computer.append(cards[random.randint(0,len(cards))]) #it appends a randomly chosen card from the cards list to place inside computer_cards

def sum_cards(): #adds up cards inside the computers and user list for comparison later on. 
  global computer_total #references computer_total outside of this functions
  global user_total #references user_total outside of this functions
  for total_c in computer_card: # calling all the numbers inside the list
    computer_total += total_c #take each number and add it to the counter
  for total_u in user_card: # same as above to lines
    user_total += total_u

def reset_game():
  global computer_total #references computer_total outside of this functions
  global user_total #references user_total outside of this functions
  global computer_card # counter for computer total
  global user_card # counter for user_total
  computer_total = 0
  user_total = 0
  computer_card.clear()
  user_card.clear()
  

continue_game = True
while continue_game:
  initial_card(user=user_card, computer=computer_card) #calls initial cards function for first set of cards
  print(f"Your cards: {user_card} \nComputer's Card {computer_card[0]}") #prints both computer and user cards  inside the list with only exposing one cards from the computers
  choice = input("Would you like another card 'y' or 'n' ") # this is where the user is asked if they would like another card.
  
  sum_cards() #before staring the deal, force the adding of the cards in both list.  for comparison.
  
  no_bust = True # states true for a wild loop
  if choice == 'y': # if user chooses yes follow the following instructions checks/compares
    while no_bust: # while user has not exceeded 21 continue asking if he wants cards
      user_deal() # call out user functions for extra card
      sum_cards() # since extra card above is added re compute total
      print(f"Computer's total: {computer_total} and your total: {user_total}") # display totals 
      print(f"test if user list is updated ~~~~~> {user_card}") # test
      if user_total > 21: # if when asking for a card, total passes 21 - bust!
        print("You loss!")
        no_bust = False # FORCES PROGRAM TO STOP
      elif computer_total == user_total:
        print("push: tied! ")
        no_bust = False
      else: # continue to ask for cards
        choice = input("Would you like another card 'n' or 'y'")
        if choice == 'y': # if yes it continues true to restart asking for cards
          no_bust = True
        if choice == 'n': # n forces program to stop
          if computer_total == user_total:
            print("push: tied! ")
          no_bust = False
  
  # #computers turn to try and win! this in reference to typing "n" in choice(input)
  if choice == 'n': #if no is chosen then let computer try to win. 
    if computer_total >= 17 and computer_total < 21: # if computer started over 17 then no need to proceed
      if computer_total > user_total: # since computer over 17 start comparing numbers between players who ever has the highest numbers win.
        print(f"You loss!, Computer's total: {computer_total} and your total: {user_total}")
      else:
        print(f"You Win!, Computer's total: {computer_total} and your total: {user_total}")
  
    under_17 = True #while loop set up
    while under_17: #as long as its cards are under 17 it will continue dealing til its between 17 and 21
      if computer_total < 17: # checks to see if computer is under 17 so that it can draw a card. 
        computer_deal() # deals to computer
        sum_cards() # re calculates point/total of cards in computer_cards
        print(f"test3: check to see list is updating ~~~ > {computer_card}\nTest4: is number adding up ~~~~ > {computer_total}")
        if computer_total == user_total: # set up a function to check for tie.
          print("Game is tied: push")
          under_17 = False
        elif computer_total > 21:
          print("Computer has bust, You won!")
          under_17 = False
        elif computer_total >= 17 and computer_total <= 21:
          if computer_total > user_total:
            print(f"test5: Computer's total: {computer_total} and your total: {user_total}")
            print("You lose!")
            under_17 = False
          if computer_total < user_total:
            print("You win!")
            under_17 = False
        else:
          under_17 = True
  
  continue_choice = input("Would you like to play another game, 'y' or 'n'")
  if continue_choice == 'n':
    print("Thank you for playing Black Jack, have a good day!")
    continue_game = False
  if continue_choice == 'y':
    reset_game()
    continue_game == True
